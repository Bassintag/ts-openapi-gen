/* Generated by ts-openapi-gen, do not edit manually */

import { {{#imports}}{{.}}, {{/imports}} } from '..';

{{#methods}}
    {{#queryParams.length}}
export interface {{capitalizedName}}Query {
    {{#queryParams}}
    {{name}}?: string;

    {{/queryParams}}
}

    {{/queryParams.length}}
{{/methods}}

type FetchApi = (
    url: string,
    options?: { method?: string; body?: string | ArrayBuffer; }
) => Promise<{
    ok: boolean;
    arrayBuffer: () => Promise<ArrayBuffer>;
    text: () => Promise<string>;
}>;

export interface {{name}}Options  {
    readonly baseUrl?: string;
    readonly fetch?: FetchApi;
}

{{#description.length}}
/**
{{#description}}
 *  {{&.}}
{{/description}}
 */
{{/description.length}}
export class {{name}} {

    private readonly baseUrl?: string;
    private readonly fetch: FetchApi;

    constructor({
        baseUrl,
        fetch = window.fetch,
    }: {{name}}Options = {}) {
        this.baseUrl = baseUrl;
        this.fetch = fetch;
    }
    {{#methods}}

    {{#description.length}}
    /**
    {{#description}}
     *  {{&.}}
    {{/description}}
     */
    {{/description.length}}
    async {{name}}({{#params.length}}{{#params}}{{name}}: string, {{/params}}{{/params.length}}{{#body}}body: {{type}}, {{/body}}{{#queryParams.length}}
        queryParams: {{capitalizedName}}Query = {}
    {{/queryParams.length}}): Promise<{{responseType}}> {
        const url = new URL(`{{#path}}{{#isVariable}}${ {{&value}} }{{/isVariable}}{{^isVariable}}{{&value}}{{/isVariable}}{{/path}}`, this.baseUrl);

        {{#queryParams.length}}
        url.search = new URLSearchParams(queryParams as Record<string, string>).toString();

        {{/queryParams.length}}
        const response = await this.fetch(url.href, {
            method: '{{method}}',
        {{#body}}
            body: {{^isArrayBuffer}}JSON.stringify({{/isArrayBuffer}}{{#isArray}}body.map((item) => {{/isArray}}{{#serializer}}{{.}}({{/serializer}}{{#isArray}}item{{/isArray}}{{^isArray}}body{{/isArray}}{{#isArray}}){{/isArray}}{{#serializer}}){{/serializer}}{{^isArrayBuffer}}){{/isArrayBuffer}},
        {{/body}}
        });

        if (!response.ok) {
            throw response;
        }

        {{#isBinary}}
        const data = await response.arrayBuffer();
        return data as {{responseType}};
        {{/isBinary}}
        {{^isBinary}}
        const data = await response.text();
        return JSON.parse(data) as {{responseType}};
        {{/isBinary}}
    }
    {{/methods}}
}
