/* Generated by ts-codegen, do not edit manually */

import { {{#imports}}{{.}}, {{/imports}}} from '..';

export class {{name}} {

    constructor(private readonly baseUrl?: string) {}
    {{#methods}}

    async {{name}}({{#params.length}}{{#params}}{{name}}: string, {{/params}}{{/params.length}}{{#body}}body: {{type}}, {{/body}}{{#queryParams.length}}
        queryParams: {
{{#queryParams}}
            {{name}}?: string;
{{/queryParams}}
        } = {}
    {{/queryParams.length}}): Promise<{{responseType}}> {
        const url = new URL(`{{#path}}{{#isVariable}}${ {{&value}} }{{/isVariable}}{{^isVariable}}{{&value}}{{/isVariable}}{{/path}}`, this.baseUrl);

        {{#queryParams.length}}
        url.search = new URLSearchParams(queryParams).toString();

        {{/queryParams.length}}
        const response = await fetch(url.href, {
            method: '{{method}}',
        {{#body}}
            body: JSON.stringify({{#isArray}}body.map((item) => {{/isArray}}{{#serializer}}{{.}}({{/serializer}}{{#isArray}}item{{/isArray}}{{^isArray}}body{{/isArray}}{{#isArray}}){{/isArray}}{{#serializer}}){{/serializer}}),
        {{/body}}
        });

        if (!response.ok) {
            throw response;
        }

        const data = await response.json();
        return data as {{responseType}};
    }
    {{/methods}}
}
